// <auto-generated />
using System;
using ARMSAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ARMSAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190513094228_AddMaintenanceFee")]
    partial class AddMaintenanceFee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Keystone.Models.DataModels.AcademicCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndedAt");

                    b.Property<long>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("EventId");

                    b.HasIndex("SemesterId");

                    b.ToTable("AcademicCalendars");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<decimal>("Credit");

                    b.Property<long>("DepartmentId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<long>("FacultyId");

                    b.Property<decimal>("Hour");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsIntensiveCourse");

                    b.Property<bool>("IsSectionGroup");

                    b.Property<decimal>("Lab");

                    b.Property<decimal>("Lecture");

                    b.Property<int>("MinimumSeat");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("Other");

                    b.Property<decimal>("PaymentCredit");

                    b.Property<decimal>("RegistrationCredit");

                    b.Property<string>("ShortNameEn")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("ShortNameTh")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<long>("TeachingTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("WillCalculateCredit");

                    b.Property<bool>("WillShowTranscript");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.CreditLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsGraduating");

                    b.Property<decimal>("MaxCredit");

                    b.Property<decimal>("MaxGPA");

                    b.Property<decimal>("MinCredit");

                    b.Property<decimal>("MinGPA");

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CreditLoads");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CourseGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ConcentrationId");

                    b.Property<long?>("CourseGroupId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<decimal>("Credit");

                    b.Property<long>("CurriculumVersionId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("MinorId");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConcentrationId");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("MinorId");

                    b.ToTable("CourseGroups","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.Curriculum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbreviationEn")
                        .HasMaxLength(100);

                    b.Property<string>("AbbreviationTh")
                        .HasMaxLength(100);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<double>("MinimumGPA");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SemesterType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("TotalCredit");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ReferenceCode")
                        .IsUnique();

                    b.ToTable("Curriculums","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseGroupId");

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("RequiredGrade")
                        .HasMaxLength(5);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourses","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumInstructor", b =>
                {
                    b.Property<long>("CurriculumVersionId");

                    b.Property<long>("InstructorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("CurriculumVersionId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CurriculumInstructors","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicProgramId");

                    b.Property<DateTime>("ApprovedDate");

                    b.Property<long?>("ClosedSemesterId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("CurriculumId");

                    b.Property<long>("ImplementedSemesterId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ManximumTerm");

                    b.Property<int>("MinimumTerm");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("OpenedSemesterId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("ClosedSemesterId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("ImplementedSemesterId");

                    b.HasIndex("OpenedSemesterId");

                    b.ToTable("CurriculumVersions","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.StudyCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("StudyPlanId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudyPlanId");

                    b.ToTable("StudyCourses","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.StudyPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("CurriculumVersionId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive");

                    b.Property<int>("Semester");

                    b.Property<int>("TotalCredit");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumVersionId");

                    b.ToTable("StudyPlans","curriculum");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Instructor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<long?>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTh")
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTh")
                        .HasMaxLength(100);

                    b.Property<long>("NationalityId");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(100);

                    b.Property<string>("ProfileImageURL")
                        .HasMaxLength(2100);

                    b.Property<long?>("ProvinceId");

                    b.Property<long>("RaceId");

                    b.Property<long>("ReligionId");

                    b.Property<long?>("StateId");

                    b.Property<long?>("SubdistrictId");

                    b.Property<string>("TelephoneNumber1")
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<long>("TitleId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RaceId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubdistrictId");

                    b.HasIndex("TitleId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.InstructorWorkStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicLevelId");

                    b.Property<string>("AcademicPosition")
                        .HasMaxLength(100);

                    b.Property<string>("AdminPosition")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Division")
                        .HasMaxLength(100);

                    b.Property<long?>("FacultyId");

                    b.Property<decimal>("GraduatedLoad");

                    b.Property<long>("InstructorId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Job")
                        .HasMaxLength(100);

                    b.Property<string>("Metier")
                        .HasMaxLength(100);

                    b.Property<string>("OfficeRoom")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<decimal>("TeachingHour");

                    b.Property<string>("Type")
                        .HasMaxLength(2);

                    b.Property<decimal>("UnderGraduateLoad");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstructorId")
                        .IsUnique();

                    b.ToTable("InstructorWorkStatuses");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AcademicHonor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AcademicHonors","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AcademicLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AcademicLevels","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AcademicProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AcademicPrograms","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AdmissionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AdmissionTypes","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachments")
                        .HasMaxLength(5000);

                    b.Property<long>("ChannelId");

                    b.Property<string>("CoverImageURL")
                        .HasMaxLength(2100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DetailWebUrl")
                        .HasMaxLength(2100);

                    b.Property<DateTime>("ExpiredAt");

                    b.Property<string>("HTMLBody")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFlagged");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Announcements","announcement");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AnnouncementTopic", b =>
                {
                    b.Property<long>("AnnouncementId");

                    b.Property<long>("TopicId");

                    b.HasKey("AnnouncementId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("AnnouncementTopic","announcement");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.BankBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("BankBranches","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("FloorNumber");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Campus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1En")
                        .HasMaxLength(500);

                    b.Property<string>("Address1Th")
                        .HasMaxLength(500);

                    b.Property<string>("Address2En")
                        .HasMaxLength(500);

                    b.Property<string>("Address2Th")
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<long>("SubdistrictId");

                    b.Property<string>("TelephoneNumber1")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SubdistrictId");

                    b.ToTable("Campuses","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.CardExpirationOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("ValidityYear");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("CardExpirationOptions","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Channels","announcement");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Concentration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Concentrations","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.EducationBackground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("EducationBackgrounds","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("EventCategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("Events","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.EventCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("EventCategories","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Faculties","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LockedChangeFaculty");

                    b.Property<bool>("LockedDocument");

                    b.Property<bool>("LockedGraduation");

                    b.Property<bool>("LockedPayment");

                    b.Property<bool>("LockedRegistration");

                    b.Property<bool>("LockedVisa");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Incidents","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.MaintenanceFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<decimal>("Fee");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SemesterId");

                    b.Property<long>("StudentGroupId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("MaintenanceFees","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Minor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Minors","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Nationality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Nationalities","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.PreviousSchool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("PreviousSchools","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Races","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.ReEnterReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ReEnterReasons","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.RegistrationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RegistrationStatuses","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Relationships","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Religions","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.ResignReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ResignReasons","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.RetireReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RetireReasons","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BuildingId");

                    b.Property<int>("Capacity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("Floor");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("RoomTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RoomTypes","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Semester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<int>("AcademicYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EndedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdvising");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsRegistration");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<int>("Term");

                    b.Property<decimal>("TotalWeeksCount");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("Semesters","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("States","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("StudentGroups","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Subdistrict", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Subdistricts","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.TeachingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalculateType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLoadCalculation");

                    b.Property<decimal>("LoadConverter");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("TeachingTypes","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Titles","master");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChannelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Topics","announcement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<int>("Id");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.HasKey("RoleId", "Id", "ClaimType", "ClaimValue");

                    b.HasAlternateKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("UserId");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("UserId");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("LoginProvider", "UserId", "Name", "Value");

                    b.HasAlternateKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.AcademicCalendar", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Course", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.CreditLoad", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CourseGroup", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Concentration", "Concentration")
                        .WithMany()
                        .HasForeignKey("ConcentrationId");

                    b.HasOne("Keystone.Models.DataModels.Curriculum.CourseGroup", "ParentGroup")
                        .WithMany("ChildCourseGroups")
                        .HasForeignKey("CourseGroupId");

                    b.HasOne("Keystone.Models.DataModels.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Minor", "Minor")
                        .WithMany()
                        .HasForeignKey("MinorId");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.Curriculum", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumCourse", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.Curriculum.CourseGroup", "CourseGroup")
                        .WithMany("CurriculumCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumInstructor", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CurriculumInstructors")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.CurriculumVersion", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "ClosedSemester")
                        .WithMany()
                        .HasForeignKey("ClosedSemesterId");

                    b.HasOne("Keystone.Models.DataModels.Curriculum.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("ImplementedSemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "OpenedSemester")
                        .WithMany()
                        .HasForeignKey("OpenedSemesterId");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.StudyCourse", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Keystone.Models.DataModels.Curriculum.StudyPlan", "StudyPlan")
                        .WithMany("StudyCourses")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Curriculum.StudyPlan", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("StudyPlans")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.Instructor", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.InstructorWorkStatus", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Keystone.Models.DataModels.Instructor", "Instructor")
                        .WithOne("InstructorWorkStatus")
                        .HasForeignKey("Keystone.Models.DataModels.InstructorWorkStatus", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Announcement", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.AnnouncementTopic", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Announcement", "Announcement")
                        .WithMany("AnnouncementTopics")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Building", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Campus", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.CardExpirationOption", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.City", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Concentration", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Department", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.District", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.EducationBackground", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Event", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.EventCategory", "EventCategory")
                        .WithMany()
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.MaintenanceFee", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Minor", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.PreviousSchool", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Province", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Room", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Semester", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.State", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.StudentGroup", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Subdistrict", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Keystone.Models.DataModels.MasterTables.Topic", b =>
                {
                    b.HasOne("Keystone.Models.DataModels.MasterTables.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Keystone.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
