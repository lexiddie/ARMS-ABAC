// <auto-generated />
using System;
using ARMSAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ARMSAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200403174812_ExaminationAssigningLog")]
    partial class ExaminationAssigningLog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ExaminationAssigningLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("LogType");

                    b.HasKey("Id");

                    b.ToTable("ExaminationAssigningLog","examination");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AcademicCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndedAt");

                    b.Property<long>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("EventId");

                    b.HasIndex("SemesterId");

                    b.ToTable("AcademicCalendars");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AcademicInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<long>("AcademicProgramId");

                    b.Property<string>("Batch")
                        .HasMaxLength(20);

                    b.Property<long?>("ConcentrationId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("CreditComp");

                    b.Property<int?>("CreditEarned");

                    b.Property<int?>("CreditExempted");

                    b.Property<int?>("CreditLimit");

                    b.Property<int?>("CreditTransfer");

                    b.Property<long?>("CurriculumVersionId");

                    b.Property<string>("DegreeName")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long>("FacultyId");

                    b.Property<decimal>("GPA");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAthlete");

                    b.Property<long?>("MinorId");

                    b.Property<string>("OldStudentCode")
                        .HasMaxLength(20);

                    b.Property<long?>("ScholarshipId");

                    b.Property<long?>("SecondConcentrationId");

                    b.Property<long?>("SecondMinorId");

                    b.Property<long>("StudentGroupId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("ConcentrationId");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MinorId");

                    b.HasIndex("ScholarshipId");

                    b.HasIndex("SecondConcentrationId");

                    b.HasIndex("SecondMinorId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AcademicInformations","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AdmissionInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate");

                    b.Property<long>("AdmissionSemesterId");

                    b.Property<long>("AdmissionTypeId");

                    b.Property<DateTime>("CheckDated");

                    b.Property<string>("CheckReferenceNumber")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("EducationBackgroundId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("PreviousGraduatedYear");

                    b.Property<decimal?>("PreviousSchoolGPA");

                    b.Property<long?>("PreviousSchoolId");

                    b.Property<DateTime>("ReplyDate");

                    b.Property<string>("ReplyReferenceNumber")
                        .HasMaxLength(200);

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AdmissionSemesterId");

                    b.HasIndex("AdmissionTypeId");

                    b.HasIndex("EducationBackgroundId");

                    b.HasIndex("PreviousSchoolId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AdmissionInformations","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CheatingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovedAt");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(200);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Detail")
                        .HasMaxLength(500);

                    b.Property<long>("ExaminationTypeId");

                    b.Property<long?>("FromSemesterId");

                    b.Property<long?>("IncidentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("PaidStatus");

                    b.Property<long>("SectionId");

                    b.Property<long>("StudentId");

                    b.Property<long?>("ToSemesterId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExaminationTypeId");

                    b.HasIndex("FromSemesterId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("ToSemesterId");

                    b.ToTable("CheatingStatuses","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<decimal>("Credit");

                    b.Property<long>("DepartmentId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<long>("FacultyId");

                    b.Property<decimal>("Hour");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsIntensiveCourse");

                    b.Property<bool>("IsSectionGroup");

                    b.Property<decimal>("Lab");

                    b.Property<decimal>("Lecture");

                    b.Property<int>("MinimumSeat");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("Other");

                    b.Property<decimal>("PaymentCredit");

                    b.Property<decimal>("RegistrationCredit");

                    b.Property<string>("ShortNameEn")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("ShortNameTh")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<long>("TeachingTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("WillCalculateCredit");

                    b.Property<bool>("WillShowTranscript");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CourseExaminationSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("ExaminationSlotId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExaminationSlotId");

                    b.ToTable("CourseExaminationSlot","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CreditLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsGraduating");

                    b.Property<decimal>("MaxCredit");

                    b.Property<decimal>("MaxGPA");

                    b.Property<decimal>("MinCredit");

                    b.Property<decimal>("MinGPA");

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CreditLoads","registration");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CourseGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ConcentrationId");

                    b.Property<long?>("CourseGroupId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<decimal>("Credit");

                    b.Property<long>("CurriculumVersionId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("MinorId");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ConcentrationId");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("MinorId");

                    b.ToTable("CourseGroups","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.Curriculum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbreviationEn")
                        .HasMaxLength(100);

                    b.Property<string>("AbbreviationTh")
                        .HasMaxLength(100);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .HasMaxLength(500);

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<double>("MinimumGPA");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SemesterType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("TotalCredit");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ReferenceCode")
                        .IsUnique();

                    b.ToTable("Curriculums","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseGroupId");

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("RequiredGrade")
                        .HasMaxLength(5);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourses","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumInstructor", b =>
                {
                    b.Property<long>("CurriculumVersionId");

                    b.Property<long>("InstructorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("CurriculumVersionId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CurriculumInstructors","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicProgramId");

                    b.Property<DateTime>("ApprovedDate");

                    b.Property<long?>("ClosedSemesterId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("CurriculumId");

                    b.Property<string>("DegreeAbbreviationEn")
                        .HasMaxLength(100);

                    b.Property<string>("DegreeAbbreviationTh")
                        .HasMaxLength(100);

                    b.Property<string>("DegreeNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("DegreeNameTh")
                        .HasMaxLength(200);

                    b.Property<long>("ImplementedSemesterId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ManximumTerm");

                    b.Property<int>("MinimumTerm");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("OpenedSemesterId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("ClosedSemesterId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("ImplementedSemesterId");

                    b.HasIndex("OpenedSemesterId");

                    b.ToTable("CurriculumVersions","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.StudyCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId");

                    b.Property<decimal>("Credit");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("StudyPlanId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudyPlanId");

                    b.ToTable("StudyCourses","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.StudyPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("CurriculumVersionId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive");

                    b.Property<int>("Semester");

                    b.Property<int>("TotalCredit");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumVersionId");

                    b.ToTable("StudyPlans","curriculum");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ExaminationRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("EndStudentCode");

                    b.Property<long>("ExaminationSlotId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAuto");

                    b.Property<long>("RoomId");

                    b.Property<long>("SectionId");

                    b.Property<string>("StartStudentCode");

                    b.Property<int>("TotalSeatUsed");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExaminationSlotId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.ToTable("ExaminationRoom","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ExaminationSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Date");

                    b.Property<long>("ExaminationTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SemesterId");

                    b.Property<TimeSpan>("TimeEnd");

                    b.Property<TimeSpan>("TimeStart");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("ExaminationTypeId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ExaminationSlot","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.GraduationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("GraduatedDate");

                    b.Property<long?>("HonorId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("OtherRemark1")
                        .HasMaxLength(1000);

                    b.Property<string>("OtherRemark2")
                        .HasMaxLength(1000);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<long?>("SemesterId");

                    b.Property<long>("StudentId");

                    b.Property<string>("ThesisRemark")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("HonorId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("GraduationInformations","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Instructor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<long?>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTh")
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastNameEn")
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTh")
                        .HasMaxLength(100);

                    b.Property<long>("NationalityId");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(100);

                    b.Property<string>("ProfileImageURL")
                        .HasMaxLength(2100);

                    b.Property<long?>("ProvinceId");

                    b.Property<long>("RaceId");

                    b.Property<long>("ReligionId");

                    b.Property<long?>("StateId");

                    b.Property<long?>("SubdistrictId");

                    b.Property<string>("TelephoneNumber1")
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<long>("TitleId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RaceId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubdistrictId");

                    b.HasIndex("TitleId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.InstructorSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EndedAt");

                    b.Property<decimal>("Hours");

                    b.Property<long>("InstructorId");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SectionDetailId");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SectionDetailId");

                    b.ToTable("InstructorSections");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.InstructorWorkStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicLevelId");

                    b.Property<string>("AcademicPosition")
                        .HasMaxLength(100);

                    b.Property<string>("AdminPosition")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Division")
                        .HasMaxLength(100);

                    b.Property<long?>("FacultyId");

                    b.Property<decimal>("GraduatedLoad");

                    b.Property<long>("InstructorId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Job")
                        .HasMaxLength(100);

                    b.Property<string>("Metier")
                        .HasMaxLength(100);

                    b.Property<string>("OfficeRoom")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(200);

                    b.Property<decimal>("TeachingHour");

                    b.Property<string>("Type")
                        .HasMaxLength(2);

                    b.Property<decimal>("UnderGraduateLoad");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstructorId")
                        .IsUnique();

                    b.ToTable("InstructorWorkStatuses");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MaintenanceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovedAt");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<long>("MaintenanceFeeId");

                    b.Property<DateTime?>("PaidDate");

                    b.Property<long>("SemesterId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceFeeId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("MaintenanceStatuses","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AcademicHonor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AcademicHonors","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AcademicLevels","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AcademicProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AcademicPrograms","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AdmissionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AdmissionTypes","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachments")
                        .HasMaxLength(5000);

                    b.Property<long>("ChannelId");

                    b.Property<string>("CoverImageURL")
                        .HasMaxLength(2100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DetailWebUrl")
                        .HasMaxLength(2100);

                    b.Property<DateTime>("ExpiredAt");

                    b.Property<string>("HTMLBody")
                        .HasMaxLength(5000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFlagged");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Announcements","announcement");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AnnouncementTopic", b =>
                {
                    b.Property<long>("AnnouncementId");

                    b.Property<long>("TopicId");

                    b.HasKey("AnnouncementId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("AnnouncementTopic","announcement");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.BankBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("BankBranches","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("FloorNumber");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Campus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1En")
                        .HasMaxLength(500);

                    b.Property<string>("Address1Th")
                        .HasMaxLength(500);

                    b.Property<string>("Address2En")
                        .HasMaxLength(500);

                    b.Property<string>("Address2Th")
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<long>("SubdistrictId");

                    b.Property<string>("TelephoneNumber1")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SubdistrictId");

                    b.ToTable("Campuses","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.CardExpirationOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("ValidityYear");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("CardExpirationOptions","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Channels","announcement");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Cities","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Concentration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Concentrations","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.EducationBackground", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("EducationBackgrounds","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("EventCategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("Events","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.EventCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("EventCategories","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.ExaminationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ExaminationTypes","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Faculties","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LockedChangeFaculty");

                    b.Property<bool>("LockedDocument");

                    b.Property<bool>("LockedGraduation");

                    b.Property<bool>("LockedPayment");

                    b.Property<bool>("LockedRegistration");

                    b.Property<bool>("LockedVisa");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Incidents","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.MaintenanceFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<decimal>("Fee");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SemesterId");

                    b.Property<long>("StudentGroupId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("MaintenanceFees","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Minor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DepartmentId");

                    b.Property<long>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ShortNameEn")
                        .HasMaxLength(200);

                    b.Property<string>("ShortNameTh")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Minors","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Nationality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Nationalities","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.PreviousSchool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("PreviousSchools","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Races","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.ReEnterReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ReEnterReasons","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.RegistrationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RegistrationStatuses","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Relationship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Relationships","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Religions","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.ResignReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ResignReasons","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.RetireReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTh")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RetireReasons","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BuildingId");

                    b.Property<int>("Capacity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("ExamCapacity");

                    b.Property<int>("ExamRows");

                    b.Property<int>("Floor");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("RoomTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RoomTypes","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Scholarship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Scholarships","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Semester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<int>("AcademicYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EndedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdvising");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsRegistration");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<int>("Term");

                    b.Property<decimal>("TotalWeeksCount");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("Semesters","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("States","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("StudentGroups","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProvinceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Subdistricts","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.TeachingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalculateType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLoadCalculation");

                    b.Property<decimal>("LoadConverter");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Priority");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("TeachingTypes","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Order");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Titles","master");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChannelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(2100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NameTh")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Topics","announcement");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ParentInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressEn")
                        .HasMaxLength(500);

                    b.Property<string>("AddressTh")
                        .HasMaxLength(500);

                    b.Property<long?>("CityId");

                    b.Property<long?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailToParent");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("MailToParent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("ProvinceId");

                    b.Property<long>("RelationshipId");

                    b.Property<bool>("SMSToParent");

                    b.Property<long?>("StateId");

                    b.Property<long>("StudentId");

                    b.Property<long?>("SubdistrictId");

                    b.Property<string>("TelephoneNumber1")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubdistrictId");

                    b.ToTable("ParentInformations","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.RegistrationResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Channel")
                        .HasMaxLength(5);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLock");

                    b.Property<bool>("IsPaid");

                    b.Property<long>("SectionId");

                    b.Property<long>("SemesterId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegistrationResults","registration");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.RegistrationSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AcademicProgramId");

                    b.Property<int>("BatchCodeEnd");

                    b.Property<int>("BatchCodeStart");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAthlete");

                    b.Property<bool>("IsGraduating");

                    b.Property<int>("LastDigitEnd");

                    b.Property<int>("LastDigitStart");

                    b.Property<long>("SlotId");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SlotId");

                    b.HasIndex("StudentId");

                    b.ToTable("RegistrationSlots","registration");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.SeatArrangementResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("ExaminationSlotId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAuto");

                    b.Property<long>("RoomId");

                    b.Property<int>("RowNumber");

                    b.Property<int>("SeatNumber");

                    b.Property<long>("SectionId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExaminationSlotId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("SeatArrangementResults");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedAt");

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsEvening");

                    b.Property<bool>("IsParent");

                    b.Property<bool>("IsSpecialCase");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("OpenedAt");

                    b.Property<long?>("ParentSectionId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("SeatAvailable");

                    b.Property<int>("SeatLimit");

                    b.Property<int>("SeatUsed");

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentSectionId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.SectionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CampusId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<int>("Day");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("InstructorIds")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("RoomId");

                    b.Property<long>("SectionId");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<long>("TeachingTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("SectionDetails");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<DateTime>("EndedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSpecialSlot");

                    b.Property<int>("Round");

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Slots","registration");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccountUpdatedAt");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(20);

                    b.Property<long?>("BankBranchId");

                    b.Property<long>("BirthCountryId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<long?>("BirthProvinceId");

                    b.Property<long?>("BirthStateId");

                    b.Property<string>("CitizenNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstNameTh")
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<DateTime?>("IdCardCreatedDate");

                    b.Property<DateTime?>("IdCardExpiredDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastNameTh")
                        .HasMaxLength(100);

                    b.Property<long>("NationalityId");

                    b.Property<string>("Passport")
                        .HasMaxLength(20);

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(50);

                    b.Property<string>("ProfileImageURL")
                        .HasMaxLength(2100);

                    b.Property<long>("RaceId");

                    b.Property<long>("RegistrationStatusId");

                    b.Property<long>("ReligionId");

                    b.Property<string>("StudentRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("TelephoneNumber1")
                        .HasMaxLength(20);

                    b.Property<string>("TelephoneNumber2")
                        .HasMaxLength(20);

                    b.Property<long>("TitleId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BirthProvinceId");

                    b.HasIndex("BirthStateId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("NationalityId");

                    b.HasIndex("RaceId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("TitleId");

                    b.ToTable("Students","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressEn")
                        .HasMaxLength(500);

                    b.Property<string>("AddressTh")
                        .HasMaxLength(500);

                    b.Property<long?>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DistrictId");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ProvinceId");

                    b.Property<long?>("StateId");

                    b.Property<long>("StudentId");

                    b.Property<long?>("SubdistrictId");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubdistrictId");

                    b.ToTable("StudentAddresses","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudentIncident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("IncidentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LockedChangeFaculty");

                    b.Property<bool>("LockedDocument");

                    b.Property<bool>("LockedGraduation");

                    b.Property<bool>("LockedPayment");

                    b.Property<bool>("LockedRegistration");

                    b.Property<bool>("LockedVisa");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentIncidents","student");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudyCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<string>("EstimatedGrade")
                        .HasMaxLength(5);

                    b.Property<string>("Grade")
                        .HasMaxLength(5);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsSurveyed");

                    b.Property<long>("SectionId");

                    b.Property<long>("SemesterId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentStudyCourses");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.TeachingLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long>("InstructorId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsExtraLoad");

                    b.Property<bool>("IsUpdated");

                    b.Property<decimal>("Load");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<long>("SemesterId");

                    b.Property<long>("TeachingTypeId");

                    b.Property<int>("TotalSectionsCount");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("TeachingLoads");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.Withdrawal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("InstructorId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("RequestedAt");

                    b.Property<long?>("StudentId");

                    b.Property<long>("StudyCourseId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("Withdrawals","withdrawal");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.WithdrawalException", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<long?>("DepartmentId");

                    b.Property<long?>("FacultyId");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudentId");

                    b.ToTable("WithdrawalExceptions","withdrawal");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.WithdrawalPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndedAt");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SemesterId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("WithdrawalPeriods","withdrawal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<int>("Id");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.HasKey("RoleId", "Id", "ClaimType", "ClaimValue");

                    b.HasAlternateKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("UserId");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("UserId");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("LoginProvider", "UserId", "Name", "Value");

                    b.HasAlternateKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AcademicCalendar", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AcademicInformation", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Concentration", "Concentration")
                        .WithMany()
                        .HasForeignKey("ConcentrationId");

                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Minor", "Minor")
                        .WithMany()
                        .HasForeignKey("MinorId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Concentration", "SecondConcentration")
                        .WithMany()
                        .HasForeignKey("SecondConcentrationId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Minor", "SecondMinor")
                        .WithMany()
                        .HasForeignKey("SecondMinorId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithOne("AcademicInformation")
                        .HasForeignKey("ARMSAPI.Models.DataModels.AcademicInformation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.AdmissionInformation", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("AdmissionSemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AdmissionType", "AdmissionType")
                        .WithMany()
                        .HasForeignKey("AdmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.EducationBackground", "EducationBackground")
                        .WithMany()
                        .HasForeignKey("EducationBackgroundId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.PreviousSchool", "PreviousSchool")
                        .WithMany()
                        .HasForeignKey("PreviousSchoolId");

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithOne("AdmissionInformation")
                        .HasForeignKey("ARMSAPI.Models.DataModels.AdmissionInformation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CheatingStatus", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.ExaminationType", "ExaminationType")
                        .WithMany()
                        .HasForeignKey("ExaminationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "FromSemester")
                        .WithMany()
                        .HasForeignKey("FromSemesterId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId");

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("CheatingStatuses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "ToSemester")
                        .WithMany()
                        .HasForeignKey("ToSemesterId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Course", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CourseExaminationSlot", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany("CourseExaminationSlots")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.ExaminationSlot", "ExaminationSlot")
                        .WithMany()
                        .HasForeignKey("ExaminationSlotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.CreditLoad", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CourseGroup", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Concentration", "Concentration")
                        .WithMany()
                        .HasForeignKey("ConcentrationId");

                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CourseGroup", "ParentGroup")
                        .WithMany("ChildCourseGroups")
                        .HasForeignKey("CourseGroupId");

                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Minor", "Minor")
                        .WithMany()
                        .HasForeignKey("MinorId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.Curriculum", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumCourse", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CourseGroup", "CourseGroup")
                        .WithMany("CurriculumCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumInstructor", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CurriculumInstructors")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "ClosedSemester")
                        .WithMany()
                        .HasForeignKey("ClosedSemesterId");

                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.Curriculum", "Curriculum")
                        .WithMany("CurriculumVersions")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("ImplementedSemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "OpenedSemester")
                        .WithMany()
                        .HasForeignKey("OpenedSemesterId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.StudyCourse", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.StudyPlan", "StudyPlan")
                        .WithMany("StudyCourses")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Curriculums.StudyPlan", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Curriculums.CurriculumVersion", "CurriculumVersion")
                        .WithMany("StudyPlans")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ExaminationRoom", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany("ExaminationRoom")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.ExaminationSlot", "ExaminationSlot")
                        .WithMany()
                        .HasForeignKey("ExaminationSlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany("ExaminationRoom")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ExaminationSlot", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.ExaminationType", "ExaminationType")
                        .WithMany()
                        .HasForeignKey("ExaminationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany("ExaminationSlots")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.GraduationInformation", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicHonor", "AcademicHonor")
                        .WithMany()
                        .HasForeignKey("HonorId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithOne("GraduationInformation")
                        .HasForeignKey("ARMSAPI.Models.DataModels.GraduationInformation", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Instructor", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.InstructorSection", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.SectionDetail", "SectionDetail")
                        .WithMany("InstructorSections")
                        .HasForeignKey("SectionDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.InstructorWorkStatus", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ARMSAPI.Models.DataModels.Instructor", "Instructor")
                        .WithOne("InstructorWorkStatus")
                        .HasForeignKey("ARMSAPI.Models.DataModels.InstructorWorkStatus", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MaintenanceStatus", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.MaintenanceFee", "MaintenanceFee")
                        .WithMany()
                        .HasForeignKey("MaintenanceFeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("MaintenanceStatuses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Announcement", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.AnnouncementTopic", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Announcement", "Announcement")
                        .WithMany("AnnouncementTopics")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Building", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Campus", "Campus")
                        .WithMany("Buildings")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Campus", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.CardExpirationOption", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.City", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Concentration", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Department", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.District", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.EducationBackground", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Event", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.EventCategory", "EventCategory")
                        .WithMany()
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.MaintenanceFee", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Minor", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.PreviousSchool", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Province", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Room", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Semester", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.State", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.StudentGroup", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.MasterTables.Topic", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.ParentInformation", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("ParentInformations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.RegistrationResult", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.RegistrationSlot", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ARMSAPI.Models.DataModels.Slot", "Slot")
                        .WithMany("RegistrationSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.SeatArrangementResult", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.ExaminationSlot", "ExaminationSlot")
                        .WithMany()
                        .HasForeignKey("ExaminationSlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Section", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.SectionDetail", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany("SectionDetails")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Slot", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Student", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "BirthProvince")
                        .WithMany()
                        .HasForeignKey("BirthProvinceId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.State", "BirthState")
                        .WithMany()
                        .HasForeignKey("BirthStateId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.RegistrationStatus", "RegistrationStatus")
                        .WithMany()
                        .HasForeignKey("RegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudentAddress", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("StudentAddresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Subdistrict", "Subdistrict")
                        .WithMany()
                        .HasForeignKey("SubdistrictId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudentIncident", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Incident", "Incident")
                        .WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("StudentIncidents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.StudyCourse", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Section", "Section")
                        .WithMany("StudyCourses")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany("StudyCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.TeachingLoad", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.Withdrawal", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("ARMSAPI.Models.DataModels.StudyCourse", "StudyCourse")
                        .WithMany()
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.WithdrawalException", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("ARMSAPI.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ARMSAPI.Models.DataModels.Withdrawals.WithdrawalPeriod", b =>
                {
                    b.HasOne("ARMSAPI.Models.DataModels.MasterTables.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
